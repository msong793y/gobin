// Code generated by go-bindata. DO NOT EDIT.
// sources:
// template/template.html (1.347kB)

package gobin

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xcd\x8e\xda\x30\x10\xbe\xfb\x29\x66\xe1\xd2\x56\x0d\x21\x69\xb7\x55\x43\x8a\x8a\xba\xa0\xde\xba\x07\x2e\x3d\x3a\xb1\x89\x47\x24\x71\x64\x9b\xe5\xa7\xe2\x3d\x7a\xeb\x73\xf4\xad\xfa\x08\x95\x4d\x48\x48\x58\xa4\x1e\x96\x80\x44\xe6\xfb\xe6\xe7\xfb\x66\xe2\xbb\x87\xef\x5f\x97\x3f\x1e\xe7\x20\x4c\x91\x4f\x49\xac\xcd\x3e\xe7\x53\x92\x48\xb6\x87\x9f\x04\xa0\xa0\x2a\xc3\x32\x82\xf1\x84\x00\x54\x94\x31\x2c\xb3\xfa\x2d\xa1\xe9\x3a\x53\x72\x53\x32\x2f\x95\xb9\x54\x11\x0c\x17\x33\xfb\x58\x70\x25\x4b\x13\x41\x10\x56\x06\x06\x4b\x2a\x64\x41\x07\x13\x72\x24\xe4\x8d\xab\x9a\xc8\x9d\xa7\xf1\xe0\x6a\x25\x52\x31\xae\xbc\x44\xee\x6c\x9e\x57\xc8\x83\x77\x0b\x3e\x12\x32\xaa\x68\xc6\x5d\x8d\x2d\x32\x23\x22\x08\x83\xb4\xb0\x89\x05\x96\x9e\xe0\x98\x09\x13\x41\xf8\x69\xf4\xf1\x14\x6d\x26\x0e\x6b\x56\x2d\x27\x48\x0b\xa0\x1b\x23\x9d\x0e\xd7\x21\x82\xa0\xda\xc1\xf0\xe1\x9d\x7d\x40\xcb\x1c\x59\x0b\x7a\x8a\x32\xdc\xe8\x08\xee\xab\x5d\x57\x7a\x04\x5b\x81\x86\x4f\xce\xa2\x04\x65\x72\x1b\xc1\x18\xc6\x96\x0b\x2a\x4b\xe8\xab\xf1\x5b\xa8\xbf\xa3\xe0\xf5\x49\x85\xde\x24\x8d\x90\x66\xc6\x5a\xc9\x79\x1e\x97\xcf\x59\x3b\x4b\x23\xef\xfe\x43\xe1\x98\x72\x63\x72\x2c\xb9\x53\x07\xc3\xc5\x62\x3e\x9b\xcf\xce\xf4\x23\x21\x5f\x9a\x16\x1a\x0f\x3c\x82\xd9\xfb\x49\x77\xa3\x96\x53\x70\x86\x14\x2a\x85\xa5\x71\xd4\xd6\xe0\xde\xf2\xdb\xc1\xb0\x44\x83\x34\xbf\x0c\x36\x06\x75\xb0\x7a\x45\x9d\xd8\xe5\x9e\x7a\x85\x5a\xfb\xba\xc0\x85\xd9\x1d\xc0\x4e\xea\x25\x8a\xd3\xb5\x47\x57\xc6\x4e\x46\xf3\x2d\xdd\x6b\x8b\x1e\xc9\x91\xc4\x7e\x7d\xcd\xf1\xe9\xb8\x49\x6c\xcf\x7a\x4a\x5c\x72\xcc\xf0\x09\xd2\x9c\x6a\xfd\x79\x90\x48\xb9\x1e\x4c\x5d\xb8\x0f\xd9\x1e\x17\x50\x1f\xae\xf7\xd8\x63\x5c\xd7\x67\xfb\x67\x28\xf6\xb3\x14\xa8\x01\x35\x14\x7b\x58\xa1\xd2\x06\x2a\xa9\xcd\x1d\xfc\xfd\xfd\xeb\xcf\x73\xbf\xeb\x36\x3e\xc3\xa7\xeb\xd2\x57\x81\x47\xbb\xd5\xc0\x0f\xc9\x8d\x64\x72\xa3\xe0\xcb\x78\x21\x82\xe9\x37\xae\xb8\x15\x4a\x4b\x69\x04\x57\x4e\x67\xec\x8b\xe0\x25\x9c\xd3\x3c\x95\x25\x3b\x59\xf7\xbf\x0e\x39\x43\xc2\xdb\x86\xf4\x5e\xeb\xbf\x84\x90\xd8\xaf\xaf\x28\xf6\xdd\x59\xfd\x0b\x00\x00\xff\xff\xc0\xed\xeb\xfb\x43\x05\x00\x00")

func templateTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateTemplateHtml,
		"template/template.html",
	)
}

func templateTemplateHtml() (*asset, error) {
	bytes, err := templateTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/template.html", size: 1347, mode: os.FileMode(0644), modTime: time.Unix(1643157301, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0x40, 0xd3, 0x2f, 0x13, 0x5a, 0xba, 0x14, 0x18, 0x90, 0x83, 0x45, 0xc6, 0x99, 0xa8, 0x6, 0x32, 0x0, 0x62, 0x5e, 0xcb, 0x7a, 0xba, 0xa0, 0x32, 0xf0, 0x30, 0x16, 0xb3, 0xf3, 0xd9, 0xd6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/template.html": templateTemplateHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": {nil, map[string]*bintree{
		"template.html": {templateTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
